-- Test Script for hashtable table
-- Run this in MySQL 9.3 container
-- Tests assume that the table(s) exist because the container is
-- configured to create them on the first run

-- Enable more detailed error reporting
SET sql_mode = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- Define db to use
USE squishy_db;

-- DECLARE HANDLERs to support Test 12
-- these tests are in a procedure declared before/outside the test transaction so that
-- rollback will still work (declaring a procedure forces a commit)
DELIMITER //

DROP PROCEDURE IF EXISTS test_hashtable_insert;

-- Invalid entries test 12
CREATE PROCEDURE test_hashtable_insert()
BEGIN
    DECLARE test_result VARCHAR(75) DEFAULT 'FAILED, did not catch error 1364: invalid hashtable entry was accepted';

    DECLARE CONTINUE HANDLER FOR 1364
    BEGIN
        SET test_result='PASSED, Caught error 1364: Field doesnt have a default value';
    END;

    SELECT '';

    INSERT INTO hashtable (current_hash)
    VALUES ('abce1234');

    SELECT test_result as 'Test 12: Required field enforcement:';

    INSERT INTO hashtable (path)
    VALUES ('/test/dir');

    SELECT test_result as 'Test 12: Required field enforcement:';
END//
DELIMITER ;


-- Start transaction for testing
START TRANSACTION;


-- Test 1: Insert basic record
SELECT 'Test 1: Basic insert:' as '';
-- Insert a record
INSERT INTO hashtable (path, current_hash)
VALUES ('/home/user/documents', 'a1b2c3d4e5f6789012345678901234567890abcd');
-- Verify the insert worked
SELECT
    CASE
        WHEN COUNT(*) = 1 THEN 'PASSED'
        ELSE 'FAILED'
    END as test_result
FROM hashtable
WHERE path = '/home/user/documents'
    AND current_hash = 'a1b2c3d4e5f6789012345678901234567890abcd';

-- Test 2: Verify generated column (hashed_path)
SELECT 'Test 2: Test hashed_path generation:' as '';
-- Verify hashed_path key was generated by the table on insert in test 1
SELECT
    CASE
        WHEN hashed_path = SHA2('/home/user/documents', 256) THEN 'PASSED'
        ELSE 'FAILED'
    END as test_result,
    path,
    hashed_path,
    LENGTH(hashed_path) as hash_length,
    SHA2('/home/user/documents', 256) as expected_hash
FROM hashtable
WHERE path = '/home/user/documents';

-- Test 3: Test default values are populated
SELECT 'Test 3: Test default values are populated:' as '';
-- Insert a record
INSERT INTO hashtable (path, current_hash)
VALUES ('/tmp/test', 'e5f6789012345678901234567890abcdef1234ed');
-- Verify current latest and first timestamps were generated on insert
SELECT
    CASE
        WHEN current_dtg_first IS NOT NULL AND current_dtg_latest = current_dtg_first
        THEN 'PASSED'
        ELSE 'FAILED'
    END as test_result,
    path,
    current_dtg_latest,
    current_dtg_first
FROM hashtable
WHERE path = '/tmp/test';

-- Test 4: Test timestamp functionality
SELECT 'Test 4: Timestamp auto-generation:' as '';
-- Verify current_dtg_latest is actually a timestamp
SELECT
    CASE
        WHEN current_dtg_latest > CURRENT_TIMESTAMP - 60 THEN 'PASSED'
        ELSE 'FAILED'
    END as test_result,
    path,
    current_dtg_latest
FROM hashtable
WHERE path = '/tmp/test';

-- Test 5: Insert with all fields (JSON format)
SELECT 'Test 5: Test all values are populated (JSON format):' as '';
INSERT INTO hashtable (
    path,
    current_hash,
    target_hash,
    prev_hash,
    prev_dtg_latest,
    dirs,
    files,
    links
) VALUES (
    '/var/log/system',
    'b2c3d4e5f6789012345678901234567890abcdef',
    'c3d4e5f6789012345678901234567890abcdef12',
    'd4e5f6789012345678901234567890abcdef123',
    TIMESTAMP('2024-01-15 12:30:00'),
    JSON_ARRAY('dir1', 'dir2', 'dir3'),
    JSON_ARRAY(
        JSON_OBJECT('name', 'file1.txt', 'size', 1024),
        JSON_OBJECT('name', 'file2.log', 'size', 2048),
        JSON_OBJECT('name', 'file3.conf', 'size', 512)
    ),
    JSON_ARRAY(
        JSON_OBJECT('name', 'link1', 'target', 'target1'),
        JSON_OBJECT('name', 'link2', 'target', 'target2')
    )
);

-- Verbose output for Test 5
SELECT
    CASE
        WHEN path = '/var/log/system'
        AND current_hash ='b2c3d4e5f6789012345678901234567890abcdef'
        AND target_hash ='c3d4e5f6789012345678901234567890abcdef12'
        AND prev_hash ='d4e5f6789012345678901234567890abcdef123'
        AND prev_dtg_latest =TIMESTAMP('2024-01-15 12:30:00')
        AND JSON_CONTAINS(dirs, '"dir1"')
        AND JSON_CONTAINS(files, JSON_OBJECT('name', 'file1.txt', 'size', 1024))
        AND JSON_CONTAINS(links, JSON_OBJECT('name', 'link1', 'target', 'target1'))
        THEN 'PASSED'
        ELSE 'FAILED'
    END as test_result,
    path,
    current_hash,
    target_hash,
    prev_hash,
    prev_dtg_latest,
    dirs,
    files,
    links
FROM hashtable
WHERE path = '/var/log/system';

-- Test 6: Update operations
SELECT 'Test 6: Update operations:' as ''; -- Add blank line to output
UPDATE hashtable
SET current_hash = 'updated_hash_123456789012345678901234567',
    prev_hash = current_hash,
    prev_dtg_latest = current_dtg_latest
WHERE path = '/tmp/test';

SELECT
    CASE
        WHEN prev_hash = current_hash
        AND prev_dtg_latest = current_dtg_latest
        THEN 'PASSED'
        ELSE 'FAILED'
    END as test_result,
    current_hash,
    current_dtg_latest,
    prev_hash,
    prev_dtg_latest
FROM hashtable
WHERE path = '/tmp/test';

-- Test 7: Ordered update operations
SELECT 'Test 7: Ordered update operations:' as ''; -- Add blank line to output
UPDATE hashtable
SET prev_hash = current_hash,
    prev_dtg_latest = current_dtg_latest,
    current_hash = 'new_hash_123456789012345678901234567',
    current_dtg_latest = TIMESTAMP('2024-01-15 12:31:00')
WHERE path = '/tmp/test';

SELECT
    CASE
        WHEN prev_hash != current_hash
        AND prev_dtg_latest != current_dtg_latest
        AND current_hash = 'new_hash_123456789012345678901234567'
        AND current_dtg_latest = TIMESTAMP('2024-01-15 12:31:00')
        THEN 'PASSED'
        ELSE 'FAILED'
    END as test_result,
    current_hash,
    current_dtg_latest,
    prev_hash,
    prev_dtg_latest
FROM hashtable
WHERE path = '/tmp/test';

-- Test 8: Complex query test
SELECT 'Test 8: Complex query:' as ''; -- Add blank line to output
SELECT
    CASE
        WHEN COUNT(*) = 3
        AND COUNT(DISTINCT hashed_path) = 3
        AND AVG(LENGTH(path)) BETWEEN 14.666 AND 14.667
        THEN 'PASSED'
        ELSE 'FAILED'
    END as test_result,
    COUNT(*) as total_records,
    COUNT(DISTINCT hashed_path) as unique_hashes,
    AVG(LENGTH(path)) as avg_path_length,
    MIN(current_dtg_latest) as earliest_timestamp,
    MAX(current_dtg_latest) as latest_timestamp
FROM hashtable;

-- Test 9: Test data integrity
SELECT 'Test 9: Data integrity:' as ''; -- Add blank line to output
SELECT
    CASE
        WHEN LENGTH(hashed_path) = 64 AND LENGTH(current_hash) <= 40
        THEN 'PASSED'
        ELSE 'FAILED'
    END as test_result,
    path,
    LENGTH(hashed_path) as hash_length,
    LENGTH(current_hash) as current_hash_length
FROM hashtable;

-- Test 10: Test JSON field handling with special characters
SELECT 'Test 10: JSON fields handling:' as ''; -- Add blank line to output
INSERT INTO hashtable (
    path,
    current_hash,
    dirs,
    files,
    links
) VALUES (
    '/special/path with spaces & symbols!@#$%',
    'f6789012345678901234567890abcdef12345',
    JSON_ARRAY('dir with spaces', 'dir@symbols', 'dir#hash'),
    JSON_ARRAY(
        JSON_OBJECT('name', 'file with spaces.txt', 'size', 1234),
        JSON_OBJECT('name', 'file@symbol.log', 'size', 5678)
    ),
    JSON_ARRAY(
        JSON_OBJECT('name', 'link with spaces', 'target', 'target with spaces')
    )
);

SELECT
    CASE
        WHEN path = '/special/path with spaces & symbols!@#$%'
        AND current_hash = 'f6789012345678901234567890abcdef12345'
        AND JSON_CONTAINS(dirs, '"dir with spaces"')
        AND JSON_CONTAINS(files, JSON_OBJECT('name', 'file with spaces.txt', 'size', 1234))
        AND JSON_CONTAINS(links, JSON_OBJECT('name', 'link with spaces', 'target', 'target with spaces'))
        THEN 'PASSED'
        ELSE 'FAILED'
    END as test_result
FROM hashtable
WHERE path = '/special/path with spaces & symbols!@#$%';

-- Test 11: Test current_hash, target_hash and, prev_hash are case-insensitive
SELECT 'Test 11: Test current_hash, target_hash and, prev_hash are case-insensitive:' as '';

SELECT
    CASE
        WHEN COUNT(*) > 0 THEN 'PASSED'
        ELSE 'FAILED'
    END as current_hash
FROM hashtable
WHERE current_hash = 'B2C3D4E5f6789012345678901234567890abcdef';
SELECT
    CASE
        WHEN COUNT(*) > 0 THEN 'PASSED'
        ELSE 'FAILED'
    END as target_hash
FROM hashtable
WHERE target_hash = 'C3D4E5F6789012345678901234567890abcdef12';
SELECT
    CASE
        WHEN COUNT(*) > 0 THEN 'PASSED'
        ELSE 'FAILED'
    END as prev_hash
FROM hashtable
WHERE prev_hash = 'D4E5F6789012345678901234567890abcdef123';

-- Test 12: Required field enforcement
CALL test_hashtable_insert();

-- Test 13: JSON query functionality
SELECT 'Test 13: JSON query functionality:' as '';
SELECT
    CASE
        WHEN COUNT(*) > 0 THEN 'PASSED'
        ELSE 'FAILED'
    END as test_result,
    'Testing JSON queries' as description
FROM hashtable
WHERE JSON_CONTAINS(dirs, '"dir1"')
   OR JSON_EXTRACT(files, '$[0].name') = 'file1.txt'
   OR JSON_EXTRACT(links, '$[0].name') = 'link1';

-- Test Summary
SELECT '';
SELECT '=== TEST SUMMARY ===' as summary;

SELECT
    'Total records inserted: ' as metric,
    COUNT(*) as value
FROM hashtable;

SELECT
    'Unique hashed paths: ' as metric,
    COUNT(DISTINCT hashed_path) as value
FROM hashtable;

SELECT
    'Records with all fields populated: ' as metric,
    COUNT(*) as value
FROM hashtable
WHERE target_hash IS NOT NULL
  AND prev_hash IS NOT NULL
  AND prev_dtg_latest IS NOT NULL;

-- Display all test data
SELECT '=== ALL TEST DATA ===' as data_review;
SELECT * FROM hashtable ORDER BY current_dtg_latest;

-- Rollback transaction to clean up test data
ROLLBACK;

SELECT 'All tests completed. Transaction rolled back to clean up test data.' as final_message;